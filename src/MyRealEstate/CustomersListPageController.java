package MyRealEstate;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.function.Predicate;

import static javafx.application.Application.launch;


public class CustomersListPageController implements Initializable{

    //fields generated by java fx scene builder
    @FXML
    private Button homeBtn;

    @FXML
    private Button addNewCustomer;

    @FXML
    private TableView<Customer> custTable;

    @FXML
    private TableColumn<Customer, Integer> id;

    @FXML
    private TableColumn<Customer, String> firstname;

    @FXML
    private TableColumn<Customer, String> lastname;

    @FXML
    private TableColumn<Customer, String> phoneno;

    @FXML
    private TableColumn<Customer, String> presentaddress;

    @FXML
    private TableColumn<Customer, String> email;

    @FXML
    private TableColumn<Customer, LocalDate> dateofbirth;

    public Button displayCustomersBtn;
    @FXML
    private TextArea CustomersDisplay;

    @FXML
    private Label customersLabel;

    @FXML
    private TextField custSearchBox;

    @FXML
    private Button addCustBtn;

    @FXML
    private Button goToPropBtn;

    @FXML
    private Button delCustBtn;

    private Customer customer;

    private CustomerHandler customerHandler;

    /**
     * this is an array list of cutomers
     * here we cast the array list of customers in the database to update the customers list
     */
    ArrayList<Customer> list;
    {
        try {
            list = new ArrayList<Customer>((ArrayList<Customer>) CustomerHandler.getListOfCustomers());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * the array list is parsed into an observable list
     * observable list helps to track changes in the list when they occur
     */
    ObservableList<Customer> custList = FXCollections.observableList(list);

    /**
     * this uses a predicate to filter the content in an observable list
     * the predicates returns a boolean and matches elements that will be in the filtered list
     */
    FilteredList<Customer> filter = new FilteredList<Customer>(custList, p -> true);

    /**
     * in the initialize method, cell value factory are set for the fields representing the customers details
     * here, fields in the customer class are being matched with fields that will be displayed on the customers list table
     * @param url
     * @param resourceBundle
     */
    public void initialize(URL url, ResourceBundle resourceBundle) {

        id.setCellValueFactory(new PropertyValueFactory<Customer, Integer>("customerId"));
        firstname.setCellValueFactory(new PropertyValueFactory<Customer, String>("firstName"));
        lastname.setCellValueFactory(new PropertyValueFactory<Customer, String>("lastName"));
        phoneno.setCellValueFactory(new PropertyValueFactory<Customer, String>("phoneNo"));
        presentaddress.setCellValueFactory(new PropertyValueFactory<Customer, String>("presentAddr"));
        email.setCellValueFactory(new PropertyValueFactory<Customer, String>("emailAddr"));
        dateofbirth.setCellValueFactory(new PropertyValueFactory<Customer, LocalDate>("dateOfBirth"));

        custSearchBox.setPromptText("Search Customer");
        custTable.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
        custTable.setItems(custList);
    }
    /**
     * this method controls the home button which navigates the user back to the home page
     * this uses FXMLLoader to get the url of the home page and then set
     * the scene to the home page
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void homeBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("Index.fxml"));
        Scene scene = new Scene(parent);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("Home");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * this method controls the button that allows new customer to be added to the database
     * this uses FXMLLoader to get the url of the home page and then set
     * the scene to the home page
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void addNewCustomerBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("addCustomerPage.fxml"));
        Scene scene = new Scene(parent);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("Customer Registration");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * this method is used to search customers by first name, last name and email
     * it filters the table when a particular search detail is entered
     * it then wrap the filtered list into a sorted list and displays the searched fields
     * @param keyEvent
     */
    @FXML
    public void custSearch(KeyEvent keyEvent) {
        custSearchBox.textProperty().addListener((observable, oldValue, newValue) -> {
            filter.setPredicate((Predicate<? super Customer>) (Customer customer) -> {

                if(newValue.isEmpty() || newValue==null){
                    return true;
                }
                else if(customer.getFirstName().toLowerCase().contains(newValue.toLowerCase())){
                    return true;
                }
                else if(customer.getLastName().toLowerCase().contains(newValue.toLowerCase())){
                    return true;
                }
                else if(customer.getEmailAddr().toLowerCase().contains(newValue.toLowerCase())){
                    return true;
                }
                return false;
            });
        });

        SortedList sort = new SortedList(filter);
        sort.comparatorProperty().bind(custTable.comparatorProperty());

        custTable.setItems(sort);

    }

    /**
     * this method is used to control a button that shows the list of properties in the database
     * it uses FXMLLoader to get the url of the page containing list of properties in the database
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void goToPropBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("propertyListPage.fxml"));
        Scene scene = new Scene(parent);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("List Of Customers");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * this method gets the selected item from the table and deletes it from both the table view
     * and the database entirely
     * @param actionEvent
     * @throws IOException
     * @throws ClassNotFoundException
     */
    @FXML
    public void delCustBtnlistener(ActionEvent actionEvent) throws IOException, ClassNotFoundException {
        //delete property from table
        Customer customer = custTable.getSelectionModel().getSelectedItem();
        int row = custTable.getSelectionModel().getSelectedIndex();
        delete(row);

        //delete customer from serialized database
        if(customer != null) {
            CustomerHandler.delete(customer.getCustomerId());
        }
    }

    /**
     * this method gets item on a selected row and remove it from the table view
     * @param row
     */
    public void delete(int row){
        if(row >= 0){
        custTable.getItems().remove(row);
    }

    }
}

