package MyRealEstate;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import javax.swing.*;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class InvoicePageController implements Initializable {
    //fields generated by java fx scene builder
    @FXML
    private Button homeBtn;
    @FXML
    private Button confirmPurchaseBtn;
    @FXML
    private TextArea invoiceTextArea;
    @FXML
    private ComboBox<Customer> customerDropDown;
    @FXML
    private TextField propIdField;
    @FXML
    private TextField propTypeField;
    @FXML
    private TextField propAddrField;
    @FXML
    private TextField propPostCodeField;
    @FXML
    private Button showInvoiceBtn;

    private Invoice invoice;
    private ArrayList<Invoice> invoices;
    private Property property;

    /**
     *  Array list of customers in the database is being cast in an arraylist showing the list of customers
     *  and wrapped around an observable list to track changes
     */

    ArrayList<Customer> list;

    {
        try {
            list = new ArrayList<Customer>((ArrayList<Customer>) CustomerHandler.getListOfCustomers());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    ObservableList<Customer> customerInList = FXCollections.observableList(list);

    //Array list of properties in the database is being cast in an arraylist showing the list of properties
    ArrayList<Property> listProp;

    {
        try {
            listProp = new ArrayList<Property>((ArrayList<Property>) PropertyHandler.getListOfProperties());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * initialize method sets customer details inside the combo box
     * this details have been trimmed in the toString method in the customer class
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        customerDropDown.setItems(customerInList);
    }

    /**
     * this method controls the home button which navigates the user back to the home page
     * this uses FXMLLoader to get the url of the home page and then set
     * the scene to the home page
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void homeBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("Index.fxml"));
        Scene scene = new Scene(parent);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("Home");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * this method sets selected details of the property to be displayed on the invoice page
     * @param property
     * @throws IOException
     * @throws ClassNotFoundException
     */
    public void propertyAutofill(Property property) throws IOException, ClassNotFoundException {
        propIdField.setText(String.valueOf(property.getPropertyId()));
        propTypeField.setText(property.getHouseType());
        propAddrField.setText(property.getLocation());
        propPostCodeField.setText(property.getPostCode());
    }

    /**
     * displays the invoice; shows customer details, property details and necessary fees to be made
     * inorder to purchase property
     * Miguel(2020)[1]-START
     * @FXML
     *        private void receiveData(MouseEvent event) {
     * 	  // Step 1
     * 	  Node node = (Node) event.getSource();
     * 	  Stage stage = (Stage) node.getScene().getWindow();
     * 	  // Step 2
     * 	  User u = (User) stage.getUserData();
     * 	  // Step 3
     * 	  String name = u.getName();
     * 	  String email = u.getEmail();
     *    } Miguel(2020)[1]-STOP
     *    Author: Miguel Manjarres
     *    Reference: https://dev.to/devtony101/javafx-3-ways-of-passing-information-between-scenes-1bm8?signin=true
     * @param actionEvent
     * @throws IOException
     * @throws ClassNotFoundException
     */
    @FXML
    public void showInvoiceBtnListener(ActionEvent actionEvent) throws IOException, ClassNotFoundException {
        if(customerDropDown.getSelectionModel().getSelectedIndex()<0){
            String msg = "Please Select a Customer!";
            JOptionPane.showMessageDialog(null, msg);
        }
        else{
        Node node = (Node) actionEvent.getSource();
        Stage stage = (Stage)node.getScene().getWindow();
        // gets some details of the property to be purchased from the property list table
        Property targetProperty = (Property) stage.getUserData();
        Customer customer = customerDropDown.getSelectionModel().getSelectedItem();
        Invoice invoice = InvoiceHandler.createInvoice(customer, targetProperty);

                //invoice format
                String invoiceDetails = "\r\n"+ "*********Invoice**************" + "\r\n"+
                        "Invoice Id:\t\t\t\t" + invoice.getInvoiceId()+ "\r\n" + "\r\n"+
                        "Customer Id:\t\t\t\t" + invoice.getCustomer().getCustomerId()+ "\r\n" +
                        "Customer First Name: \t\t" + invoice.getCustomer().getFirstName()+ "\r\n" +
                        "Customer Last Name: \t\t" + invoice.getCustomer().getLastName()+ "\r\n" +
                        "Customer Email Address: \t" + invoice.getCustomer().getEmailAddr()+ "\r\n" +
                        "Customer Phone Number: \t" + invoice.getCustomer().getPhoneNo()+ "\r\n" + "\r\n" +
                        "Property Id: \t\t\t\t" + invoice.getProperty().getPropertyId()+ "\r\n" +
                        "Property Type: \t\t\t" + invoice.getProperty().getHouseType()+ "\r\n" +
                        "Property Location: \t\t\t" + invoice.getProperty().getLocation()+ "\r\n" +
                        "Property Postcode: \t\t\t" + invoice.getProperty().getPostCode()+ "\r\n" + "\r\n" +
                        "Property Features" + "\r\n" +
                        "Bedrooms: \t\t\t\t" + invoice.getProperty().getBedRooms()+ "\r\n" +
                        "Bathrooms: \t\t\t\t" + invoice.getProperty().getBathRooms()+ "\r\n" +
                        "Garden: \t\t\t\t\t" + invoice.getProperty().getHasGardenString()+ "\r\n" +
                        "Conservatory: \t\t\t\t" + invoice.getProperty().getHasConservatoryString()+ "\r\n" +
                        "Garage: \t\t\t\t\t" + invoice.getProperty().getHasGarageString()+ "\r\n" +
                        "Loft: \t\t\t\t\t" + invoice.getProperty().getHasLoftString()+ "\r\n" + "\r\n" +
                        "Price: \t\t\t\t\t" + invoice.getProperty().getPrice()+ "\r\n" +
                        "Agent Fee: \t\t\t\t" + invoice.getAgentFee() + "\r\n"+
                        "Rent Deposit: \t\t\t\t" + invoice.getRentDeposit() + "\r\n" +
                        "Date: \t\t\t\t\t" + invoice.getDate() + "\r\n"+
                        "Next Rent Date: \t\t\t" + invoice.getNextRent() + "\r\n" + "\r\n" +
                        "Total Fee Payable: \t\t\t" + invoice.getTotalFee();

                invoiceTextArea.setText(invoiceDetails);
        }
    }

    /**
     * this method controls the button that navigates to the customer registration page
     * this uses FXMLLoader to get the url of the page containing customer registration form
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void addCustBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("addCustomerPage.fxml"));
        Scene scene = new Scene(parent);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("Customer Registration");
        stage.setScene(scene);
        stage.show();
    }


    /**
     * This method controls the confirm button that saves the payment to the database
     * it validates the fields so that necessary information is displayed before purchase is made
     * @param actionEvent
     * @throws IOException
     * @throws ClassNotFoundException
     */
    @FXML
    public void confirmPurchaseBtnListener(ActionEvent actionEvent) throws IOException, ClassNotFoundException {
        Node node = (Node) actionEvent.getSource();
        Stage stage = (Stage) node.getScene().getWindow();
        property = (Property)stage.getUserData();

        if(actionEvent.getSource() == confirmPurchaseBtn){
            if(invoiceTextArea.getText().isEmpty()){
                String outputMsg = "Please Show Invoice!";
                JOptionPane.showMessageDialog(null, outputMsg);
            }
            else if(customerDropDown.getSelectionModel().getSelectedIndex()<0){
                String msg = "Please Select a Customer!";
                JOptionPane.showMessageDialog(null, msg);
            } else{
                invoices = InvoiceHandler.getInvoiceList();
                PropertyHandler.setAvailabilityStatus(property.getPropertyId(), false);
                HandlerOps.inputDataToInvoiceFile(invoices);
                String outputMsg = "Purchase Approved!";
                JOptionPane.showMessageDialog(null, outputMsg);
                homeBtnListener(actionEvent);
            }
        }
    }
}
