package MyRealEstate;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;

import javax.swing.*;
import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.function.Predicate;


public class propertyListPageController implements Initializable {
    //fields generated by java fx scene builder
    @FXML
    private Button showListOfProperties;

    @FXML
    private Button homeBtn;

    @FXML
    private Button addNewProperty;

    @FXML
    private TableView<Property> table;

    @FXML
    private TableColumn<Property, Integer> id;

    @FXML
    private TableColumn<Property, String> type;

    @FXML
    private TableColumn<Property, String> location;

    @FXML
    private TableColumn<Property, String> postcode;

    @FXML
    private TableColumn<Property, Boolean> rent;

    @FXML
    private TableColumn<Property, Boolean> sale;

    @FXML
    private TableColumn<Property, Integer> rooms;

    @FXML
    private TableColumn<Property, Integer> baths;

    @FXML
    private TableColumn<Property, Boolean> garden;

    @FXML
    private TableColumn<Property, Boolean> conservatory;

    @FXML
    private TableColumn<Property, Boolean> garage;

    @FXML
    private TableColumn<Property, Boolean> loft;

    @FXML
    private TableColumn<Property, Double> price;

    @FXML
    private TableColumn<Property, LocalDate> date;

    @FXML
    private TableColumn<Property, Boolean> availability;

    @FXML
    private TextField searchBox;

    @FXML
    private Label serachLabel;

    @FXML
    private Button delPropBtn;
    @FXML
    private Button purchaseBtn;

    private Property property;

    private PropertyHandler propertyHandler;

    //ArrayList of properties in the database is being cast into the array list of properties on the table
    //this is in turn wrapped by observable list to track changes made in the list
    ArrayList<Property> list;
    {
        try {
            list = new ArrayList<Property>((ArrayList<Property>) PropertyHandler.getListOfProperties());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    ObservableList<Property> propList = FXCollections.observableList(list);

    /**
     *  in the initialize method, cell value factory are set for the fields representing the property details
     *  here, fields in the property class are being matched with fields that will be displayed on the properties list table
     *  the filtered list is used for the search method to filter properties based on the predefined values
     */
    FilteredList<Property> filter = new FilteredList<Property>(propList, p -> true);

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        id.setCellValueFactory(new PropertyValueFactory<Property, Integer>("propertyId"));
        type.setCellValueFactory(new PropertyValueFactory<Property, String>("houseType"));
        location.setCellValueFactory(new PropertyValueFactory<Property, String>("location"));
        postcode.setCellValueFactory(new PropertyValueFactory<Property, String>("postCode"));
        sale.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("forSaleString"));
        rent.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("forRentString"));
        rooms.setCellValueFactory(new PropertyValueFactory<Property, Integer>("bedRooms"));
        baths.setCellValueFactory(new PropertyValueFactory<Property, Integer>("bathRooms"));
        garden.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("hasGardenString"));
        conservatory.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("hasConservatoryString"));
        garage.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("hasGarageString"));
        loft.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("hasLoftString"));
        price.setCellValueFactory(new PropertyValueFactory<Property, Double>("price"));
        date.setCellValueFactory(new PropertyValueFactory<Property, LocalDate>("date"));
        availability.setCellValueFactory(new PropertyValueFactory<Property, Boolean>("isAvailableString"));


        table.setItems(propList);


        // set table selection model
        table.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);

        searchBox.setPromptText("Search Property");

    }

    /**
     * this method controls the home button which navigates the user back to the home page
     * this uses FXMLLoader to get the url of the home page and then set
     * the scene to the home page
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void homeBtnListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("Index.fxml"));
        Scene scene = new Scene(parent);

        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        // Display our window, using the scene graph.
        stage.setTitle("Home");
        stage.setScene(scene);
        stage.show();
    }

    /**
     *this method is used to control a button that navigates to the property registration
     *it uses FXMLLoader to get the url of the page containing property registration form
     * @param actionEvent
     * @throws IOException
     */
    @FXML
    public void addNewPropertyListener(ActionEvent actionEvent) throws IOException {
        Parent parent = FXMLLoader.load(getClass().getResource("addPropertyPage.fxml"));
        Scene scene = new Scene(parent);

        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        // Display our window, using the scene graph.
        stage.setTitle("Property Registration");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * deletes  selected property from table view and database completely
     * @param actionEvent
     * @throws IOException
     * @throws ClassNotFoundException
     */
    @FXML
    public void deletePropertyBtnListener(ActionEvent actionEvent) throws IOException, ClassNotFoundException {

        //delete property from table
        Property property = table.getSelectionModel().getSelectedItem();
        int row = table.getSelectionModel().getSelectedIndex();
        delete(row);

        //delete property from serialized database
        if(property != null) {
            PropertyHandler.delete(property.getPropertyId());
        }
    }

    /**
     * deletes property from table view
     * @param row
     */
    public void delete(int row){
        if(row >= 0){
            table.getItems().remove(row);
        }
    }

    /**
     * this method is used to search properties by type, postcode  and price range
     * it filters the table when a particular search detail is entered
     * it then wrap the filtered list into a sorted list and displays the searched fields
     *@param keyEvent
     */

    @FXML
    public void searchHandler(KeyEvent keyEvent) {
        searchBox.textProperty().addListener((observable, oldValue, newValue) -> {
            filter.setPredicate((Predicate<? super Property>) (Property property) -> {

                if(newValue.isEmpty() || newValue==null){
                    return true;
                }
                else if(property.getPostCode().toLowerCase().contains(newValue.toLowerCase())){
                    return true;
                }
                else if(property.getHouseType().toLowerCase().contains(newValue.toLowerCase())){
                    return true;
                }
                else if(String.valueOf(property.getPrice()).contains(newValue)){
                    return true;
                }
                return false;
            });
        });

        SortedList sort = new SortedList(filter);
        sort.comparatorProperty().bind(table.comparatorProperty());

        table.setItems(sort);
    }

    /**
     * this methode ensures that a property is selected for sale/rent
     * it ensures the property is available for purchase
     * it shares information of the desired property with the next window when the purchase button is clicked
     * @param actionEvent
     * @throws IOException
     * @throws ClassNotFoundException
     * Miguel(2020) [1] - START
     * @FXML
     *        private void sendData(MouseEvent event) {
     * 	  // Step 1
     * 	  User u = new User();
     * 	  // Step 2
     * 	  Node node = (Node) event.getSource();
     * 	  // Step 3
     * 	  Stage stage = (Stage) node.getScene().getWindow();
     * 	  stage.close();
     * 	  try {
     * 	    // Step 4
     * 	    Parent root = FXMLLoader.load(getClass().getClassLoader().getResource("fxml/SceneA.fxml"));
     * 	    // Step 5
     * 	    stage.setUserData(u);
     * 	    // Step 6
     * 	    Scene scene = new Scene(root);
     * 	    stage.setScene(scene);
     * 	    // Step 7
     * 	    stage.show();
     *      } catch (IOException e) {
     * 	    System.err.println(String.format("Error: %s", e.getMessage()));
     *      }
     *    }
     *    Miguel(2020) [1] - END
     *    Author: Miguel Manjarres
     * Reference: https://dev.to/devtony101/javafx-3-ways-of-passing-information-between-scenes-1bm8?signin=true
     */
    @FXML
    public void purchaseBtnListener(ActionEvent actionEvent) throws IOException, ClassNotFoundException {
        Property targetProperty = table.getSelectionModel().getSelectedItem();
        if(targetProperty == null){
            String msg = "Please Select a Property to Purchase!";
            JOptionPane.showMessageDialog(null, msg);
            return;
        }
        if(targetProperty.isAvailable()){
            FXMLLoader pageLoader = new FXMLLoader();
            pageLoader.setLocation(getClass().getResource(("InvoicePage.fxml")));
            Parent parent = pageLoader.load();
            Scene scene = new Scene(parent);
            Node node = (Node) actionEvent.getSource();
            Stage stage = (Stage) node.getScene().getWindow();

            // information is being passed from the table to the next page
            InvoicePageController controller = pageLoader.getController();
            controller.propertyAutofill(targetProperty);
            stage.setUserData(targetProperty); // details of target property is being shared with the next page
            stage.setTitle("Invoice");
            stage.setScene(scene);
            stage.show();

        } else {
            String msg = "Sorry Property is not available";
            JOptionPane.showMessageDialog(null, msg);
        }
    }
}
